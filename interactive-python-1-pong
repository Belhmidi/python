# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 15
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [0.0, 0.0]
paddle1_pos = [HALF_PAD_WIDTH, HEIGHT/2]
paddle2_pos = [WIDTH-HALF_PAD_WIDTH, HEIGHT/2]
paddle1_vel = 0
paddle2_vel = 0
score1, score2 = 0, 0





# if right is True, the ball's velocity is upper right, else upper left
def ball_init(right):
    global ball_pos, ball_vel 
    ball_pos = [WIDTH/2, HEIGHT/2]
    if right == True:
        ball_vel[0] = random.randrange(3, 6)
        ball_vel[1] = random.randrange(1, 2)
    else:
        ball_vel[0] = -random.randrange(3, 6)
        ball_vel[1] = -random.randrange(1, 2)
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are floats
    global score1, score2 # these are ints
    score1, score2 = 0, 0
    ball_init(False)
 

    
#Function that checks ball collisions with a paddle
def is_collision(bal_pos, pad_pos):
    if bal_pos[1] >= pad_pos[1]- HALF_PAD_HEIGHT-BALL_RADIUS and bal_pos[1] <= pad_pos[1]+HALF_PAD_HEIGHT+BALL_RADIUS:
        return True
    else:
        return False

# key down handler           
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["W"]:
        paddle1_vel = -5
    elif key == simplegui.KEY_MAP["S"]:
        paddle1_vel = 5
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -5
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 5
        
#key up handler       
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["W"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["S"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
        
    
#All the action happend here   
def draw(canvase):
    global left_player_name, right_player_name, score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    # Collisions
    #ball collides with right paddle
    if ball_pos[0] >= WIDTH-BALL_RADIUS-PAD_WIDTH-1:
        if is_collision(ball_pos, paddle2_pos):
            ball_vel[0] = - ball_vel[0]
            ball_vel[0] *= 1.2
            ball_vel[1] *= 1.2
        else:
            ball_init(False)
            score1 +=1
                
    #ball collides with left paddle        
    elif ball_pos[0] <= BALL_RADIUS+PAD_WIDTH:
        if is_collision(ball_pos, paddle1_pos):
            ball_vel[0] = - ball_vel[0]
            ball_vel[0] *= 1.2
            ball_vel[1] *= 1.2
        else:
            ball_init(True)
            score2 +=1
            
    elif ball_pos[1] >= HEIGHT-BALL_RADIUS-1:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
 
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos[1] < HALF_PAD_HEIGHT:
        paddle1_pos[1] = HALF_PAD_HEIGHT
    else:
        paddle1_pos[1] += paddle1_vel
    if paddle1_pos[1] > HEIGHT-HALF_PAD_HEIGHT:
        paddle1_pos[1] = HEIGHT-HALF_PAD_HEIGHT
    else:
        paddle1_pos[1] += paddle1_vel    
    if paddle2_pos[1] < HALF_PAD_HEIGHT:
        paddle2_pos[1] = HALF_PAD_HEIGHT
    else:
        paddle2_pos[1] += paddle2_vel 
    if paddle2_pos[1] > HEIGHT-HALF_PAD_HEIGHT:
        paddle2_pos[1] = HEIGHT-HALF_PAD_HEIGHT
    else:
        paddle2_pos[1] += paddle2_vel   
    
    # draw mid line and gutters
    canvase.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvase.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvase.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # draw paddles
    canvase.draw_line([paddle1_pos[0], paddle1_pos[1]-HALF_PAD_HEIGHT],[paddle1_pos[0], paddle1_pos[1]+HALF_PAD_HEIGHT], 8, "White")
    canvase.draw_line([paddle2_pos[0], paddle2_pos[1]-HALF_PAD_HEIGHT],[paddle2_pos[0], paddle2_pos[1]+HALF_PAD_HEIGHT], 8, "White") 
    # update ball
            
    # draw ball and scores
    canvase.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")
    canvase.draw_text(str(score1) + "   " + str(score2), [WIDTH/2.2, 20], 30, "White")
    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
New_game = frame.add_button("Start a new game", new_game)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

# start frame
frame.start()
